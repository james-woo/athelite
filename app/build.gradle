import com.android.ddmlib.DdmPreferences

apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.athelite"
        minSdkVersion 21
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        DdmPreferences.setTimeOut(60000)
    }
    
    signingConfigs {
        debug {
            File signingPropFile = rootProject.file('signing.properties')
            if (signingPropFile.exists()) {
                Properties signingProp = new Properties()
                signingProp.load(signingPropFile.newDataInputStream())
                storeFile file(signingProp.get("debug.storeFile"))
                storePassword signingProp.get("debug.storePassword")
                keyAlias signingProp.get("debug.keyAlias")
                keyPassword signingProp.get("debug.keyPassword")
            } else if (System.getenv('DEBUG_KEYSTORE_BASE64') != null) {
                storeFile file(System.getenv('DEBUG_KEYSTORE'))
                storePassword System.getenv('DEBUG_KEYSTORE_PASSWORD')
                keyAlias System.getenv('DEBUG_KEYSTORE_KEY_ALIAS')
                keyPassword System.getenv('DEBUG_KEYSTORE_KEY_PASSWORD')
            }
        }
        release {
            File signingPropFile = rootProject.file('signing.properties')
            if (signingPropFile.exists()) {
                Properties signingProp = new Properties()
                signingProp.load(signingPropFile.newDataInputStream())
                storeFile file(signingProp.get("release.storeFile"))
                storePassword signingProp.get("release.storePassword")
                keyAlias signingProp.get("release.keyAlias")
                keyPassword signingProp.get("release.keyPassword")
            } else if (System.getenv('RELEASE_KEYSTORE_BASE64') != null) {
                storeFile file(System.getenv('RELEASE_KEYSTORE'))
                storePassword System.getenv('RELEASE_KEYSTORE_PASSWORD')
                keyAlias System.getenv('RELEASE_KEYSTORE_KEY_ALIAS')
                keyPassword System.getenv('RELEASE_KEYSTORE_KEY_PASSWORD')
            }
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
    
    lintOptions {
        abortOnError false
    }
    
    productFlavors {
        dev {
        }
        prod {
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (rootProject.file('signing.properties').exists()
                    || System.getenv('RELEASE_KEYSTORE_BASE64') != null) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            testCoverageEnabled = true
            if (rootProject.file('signing.properties').exists()
                    || System.getenv('DEBUG_KEYSTORE_BASE64') != null) {
                signingConfig signingConfigs.debug
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    
    testCompile "junit:junit:$rootProject.ext.junitVersion"
    testCompile "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    testCompile "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"
    testCompile("org.powermock:powermock-module-junit4:$rootProject.ext.powerMockito")
    testCompile("org.powermock:powermock-api-mockito:$rootProject.ext.powerMockito")

    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.1'
    
    androidTestCompile("com.android.support.test:runner:$rootProject.ext.runnerVersion") {
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
    }
    androidTestCompile("com.android.support.test:rules:$rootProject.ext.runnerVersion") {
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
    }
    
    // Espresso UI Testing
    androidTestCompile("com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion") {
        exclude module: 'recyclerview-v7'
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
        exclude group: "javax.inject"

    }
    androidTestCompile("com.android.support.test.espresso:espresso-contrib:$rootProject.ext.espressoVersion") {
        exclude module: 'recyclerview-v7'
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
    }
    androidTestCompile("com.android.support.test.espresso:espresso-intents:$rootProject.ext.espressoVersion") {
        exclude module: 'recyclerview-v7'
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
    }
    
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support:design:23.4.0'
    compile 'com.android.support:cardview-v7:23.4.0'
    compile 'com.android.support:recyclerview-v7:23.4.0'
    compile 'com.prolificinteractive:material-calendarview:1.2.1'
    compile 'com.android.support:support-v4:23.4.0'
    compile 'com.github.halysongoncalves:pugnotification:1.8.1'
    compile 'com.jjoe64:graphview:4.0.1'
}

// Grant animation permissions to avoid test failure because of ui sync.
task grantAnimationPermissions(type: Exec, dependsOn: 'installDevDebug') {
    group = 'test'
    description = 'Grant permissions for testing.'

    def absolutePath = file('..') // Get project absolute path
    commandLine "$absolutePath/set_animation_permissions.sh com.athelite".split(" ")
}

// Source: http://stackoverflow.com/q/29908110/112705
afterEvaluate {
    // When launching individual tests from Android Studio, it seems that only the assemble tasks
    // get called directly, not the install* versions
    tasks.each { task ->
        if (task.name.startsWith('assembleAndroidTest')) {
            task.dependsOn grantAnimationPermissions
        }
    }
}

def decodeKeyStoreFileFromBase64Env(String name) {
    String keyStoreBase64 = System.getenv(name)
    if (keyStoreBase64 == null) return null
    File tempKeyStoreFile = File.createTempFile("tmp_ks_", ".jks", File.createTempDir())
    FileOutputStream fos = null
    try {
        fos = new FileOutputStream(tempKeyStoreFile)
        fos.write(keyStoreBase64.decodeBase64())
        fos.flush()
    } finally {
        if (fos != null) {
            fos.close()
        }
    }
    return tempKeyStoreFile
}
